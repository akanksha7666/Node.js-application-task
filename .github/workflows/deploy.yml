name: Deploy Dockerized App

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Free up disk space
        run: |
          docker system prune -a -f
          sudo rm -rf /usr/local/lib/android /opt/hostedtoolcache
          df -h
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Install Docker Compose
        run: |
          DOCKER_COMPOSE_VERSION=2.22.0
          sudo curl -L "https://github.com/docker/compose/releases/download/v${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract commit SHA for tagging
        id: vars
        run: echo "SHA_TAG=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
        
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
        
      - name: Fix Docker permissions
        run: |
          sudo usermod -aG docker $USER
          newgrp docker
          sudo systemctl restart docker
           sleep 5
      - name: Check Docker Installation
        run: docker --version
      
      - name: Verify Docker Login
        run: docker info | grep -i "username"
        
      - name: Check Docker Compose Version
        run: docker-compose --version
        
          
      - name: Build and push Docker images
        run: |
          DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
          SHA_TAG=${{ env.SHA_TAG }}
          
          docker build -t ${{ secrets.DOCKER_USERNAME }}/admin:${{ env.SHA_TAG }} -t ${{ secrets.DOCKER_USERNAME }}/admin:latest ./admin
          docker build -t ${{ secrets.DOCKER_USERNAME }}/client-streaming:${{ env.SHA_TAG }} -t ${{ secrets.DOCKER_USERNAME }}/client-streaming:latest ./client-steaming
          docker build -t ${{ secrets.DOCKER_USERNAME }}/clientlient:${{ env.SHA_TAG }} -t ${{ secrets.DOCKER_USERNAME }}/clientlient:latest ./clientlient
          docker push ${{ secrets.DOCKER_USERNAME }}/admin:${{ env.SHA_TAG }}
          docker push ${{ secrets.DOCKER_USERNAME }}/admin:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/client-streaming:${{ env.SHA_TAG }}
          docker push ${{ secrets.DOCKER_USERNAME }}/client-streaming:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/clientlient:${{ env.SHA_TAG }}
          docker push ${{ secrets.DOCKER_USERNAME }}/clientlient:latest  
          
          
      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@master  # Use the latest stable version
        with:
         host: ${{ secrets.SSH_HOST }}
         username: ${{ secrets.SSH_USER }}
         password: ${{ secrets.SSH_PASSWORD }}
         script: |
              echo "Connected to server..."
              uname -a  # Print system info
              
              # Change to your project directory
              mkdir -p /root/Node.js-application-task
              cd /root/Node.js-application-task || exit 1
              
              # Pull latest images 
              docker pull ${{ secrets.DOCKER_USERNAME }}/admin:${{ env.SHA_TAG }}
              docker pull ${{ secrets.DOCKER_USERNAME }}/client-streaming:${{ env.SHA_TAG }}
              docker pull ${{ secrets.DOCKER_USERNAME }}/clientlient:${{ env.SHA_TAG }}
              
              # Stop and remove existing containers
              docker compose down || true 
              
              # Clean up old Docker images
              docker system prune -a -f
             
               # Update docker-compose.yml with new image versions
              sed -i 's|image: ${{ secrets.DOCKER_USERNAME }}/admin:.*|image: ${{ secrets.DOCKER_USERNAME }}/admin:${{ env.SHA_TAG }}|' docker-compose.yml
              sed -i 's|image: ${{ secrets.DOCKER_USERNAME }}/client-streaming:.*|image: ${{ secrets.DOCKER_USERNAME }}/client-streaming:${{ env.SHA_TAG }}|' docker-compose.yml
              sed -i 's|image: ${{ secrets.DOCKER_USERNAME }}/clientlient:.*|image: ${{ secrets.DOCKER_USERNAME }}/clientlient:${{ env.SHA_TAG }}|' docker-compose.yml
              
              # Start services
              docker compose up --build -d
              
              # Debug
              docker ps -a
              docker logs admin || true
   
   



    
        
     

